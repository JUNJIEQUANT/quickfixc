file_path,line_number,algorithm,usage_type,severity,confidence,description,recommendation,line_content
/home/jl1335/quickfixc/src/C++/ThreadedSSLSocketInitiator.h,146,RSA,Signature,HIGH,HIGH,RSA algorithm usage - not quantum resistant,Replace with ML-DSA (NIST Dilithium) for signatures,"  void setCertAndKey(X509 *cert, RSA *key) {"
/home/jl1335/quickfixc/src/C++/ThreadedSSLSocketInitiator.cpp,216,RSA,Signature,HIGH,HIGH,RSA algorithm usage - not quantum resistant,Replace with ML-DSA (NIST Dilithium) for signatures,"    if (SSL_CTX_use_RSAPrivateKey(m_ctx, m_key) <= 0) {"
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,155,DH,Key Exchange,HIGH,MEDIUM,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,static DH *load_dh_param(const char *dhfile) {
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,156,DH,Key Exchange,HIGH,HIGH,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,  DH *ret = NULL;
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,173,DH,Protocol/Transport,HIGH,MEDIUM,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,"static int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g) {"
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,197,DH,Key Exchange,HIGH,MEDIUM,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,static DH *make_dh_params(BIGNUM *(*prime)(BIGNUM *)) {
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,198,DH,Key Exchange,HIGH,HIGH,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,  DH *dh = DH_new();
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,198,DH,Key Exchange,HIGH,HIGH,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,  DH *dh = DH_new();
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,210,DH,Key Exchange,HIGH,MEDIUM,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,    DH_free(dh);
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,246,DH,Key Exchange,HIGH,MEDIUM,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,    DH_free(dhparams[n].dh);
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,258,DH,Signature,HIGH,HIGH,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,DH *modssl_get_dh_params(unsigned keylen) {
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,273,DH,Signature,HIGH,MEDIUM,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,"DH *ssl_callback_TmpDH(SSL *ssl, int exportvar, int keylen) {"
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,273,DH,Signature,HIGH,MEDIUM,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,"DH *ssl_callback_TmpDH(SSL *ssl, int exportvar, int keylen) {"
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,296,RSA,Signature/Encryption,HIGH,HIGH,RSA algorithm usage - not quantum resistant,Replace with ML-DSA (NIST Dilithium) for signatures,  if ((type == EVP_PKEY_RSA) || (type == EVP_PKEY_DSA)) {
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,296,DSA,Signature,HIGH,HIGH,DSA algorithm usage - not quantum resistant,Replace with ML-DSA (NIST Dilithium) for signatures,  if ((type == EVP_PKEY_RSA) || (type == EVP_PKEY_DSA)) {
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,944,Legacy_TLS,Protocol/Transport,MEDIUM,HIGH,Legacy SSL/TLS protocol versions,Upgrade to TLS 1.3 with post-quantum cipher suites,        thisopt = SSL_PROTOCOL_SSLV2;
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,947,Legacy_TLS,Protocol/Transport,MEDIUM,HIGH,Legacy SSL/TLS protocol versions,Upgrade to TLS 1.3 with post-quantum cipher suites,        thisopt = SSL_PROTOCOL_SSLV3;
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,982,Legacy_TLS,Protocol/Transport,MEDIUM,HIGH,Legacy SSL/TLS protocol versions,Upgrade to TLS 1.3 with post-quantum cipher suites,    thisopt = SSL_PROTOCOL_SSLV2;
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,991,Legacy_TLS,Protocol/Transport,MEDIUM,HIGH,Legacy SSL/TLS protocol versions,Upgrade to TLS 1.3 with post-quantum cipher suites,  if (!(options & SSL_PROTOCOL_SSLV2)) {
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,994,Legacy_TLS,Protocol/Transport,MEDIUM,HIGH,Legacy SSL/TLS protocol versions,Upgrade to TLS 1.3 with post-quantum cipher suites,  if (!(options & SSL_PROTOCOL_SSLV3)) {
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,1017,DH,Key Exchange,HIGH,HIGH,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,    DH *dh = NULL;
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,1024,DH,Key Exchange,HIGH,HIGH,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,"      SSL_CTX_set_tmp_dh(ctx, dh);"
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,1026,DH,Key Exchange,HIGH,HIGH,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,      DH_free(dh);
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,1028,DH,Key Exchange,HIGH,HIGH,Diffie-Hellman key exchange - not quantum resistant,Replace with ML-KEM (NIST Kyber) for key exchange,"      SSL_CTX_set_tmp_dh_callback(ctx, ssl_callback_TmpDH);"
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,1036,ECDSA_EC,Signature/Key Exchange,HIGH,HIGH,ECDSA/EC algorithm usage - not quantum resistant,"Replace ECDSA with ML-DSA, ECDH with ML-KEM (Kyber)",  ecdh = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,1036,ECDSA_EC,Signature/Key Exchange,HIGH,HIGH,ECDSA/EC algorithm usage - not quantum resistant,"Replace ECDSA with ML-DSA, ECDH with ML-KEM (Kyber)",  ecdh = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,1040,ECDSA_EC,Key Exchange,HIGH,HIGH,ECDSA/EC algorithm usage - not quantum resistant,"Replace ECDSA with ML-DSA, ECDH with ML-KEM (Kyber)","  SSL_CTX_set_tmp_ecdh(ctx, ecdh);"
/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp,1041,ECDSA_EC,Key Exchange,HIGH,HIGH,ECDSA/EC algorithm usage - not quantum resistant,"Replace ECDSA with ML-DSA, ECDH with ML-KEM (Kyber)",  EC_KEY_free(ecdh);
/home/jl1335/quickfixc/src/C++/SSLSocketInitiator.h,151,RSA,Signature,HIGH,HIGH,RSA algorithm usage - not quantum resistant,Replace with ML-DSA (NIST Dilithium) for signatures,"  void setCertAndKey(X509 *cert, RSA *key) {"
/home/jl1335/quickfixc/src/C++/SSLSocketInitiator.cpp,224,RSA,Signature,HIGH,HIGH,RSA algorithm usage - not quantum resistant,Replace with ML-DSA (NIST Dilithium) for signatures,"    if (SSL_CTX_use_RSAPrivateKey(m_ctx, m_key) <= 0) {"
