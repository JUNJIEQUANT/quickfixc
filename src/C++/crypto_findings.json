[
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/ThreadedSSLSocketInitiator.h",
    "line_number": 146,
    "line_content": "  void setCertAndKey(X509 *cert, RSA *key) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "RSA",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "",
      "  void setPassword(const std::string &pwd) { m_password.assign(pwd); }",
      "",
      "  void setCertAndKey(X509 *cert, RSA *key) {",
      "    m_cert = cert;",
      "    m_key = key;",
      "  }"
    ],
    "description": "RSA algorithm usage - not quantum resistant",
    "recommendation": "Replace with ML-DSA (NIST Dilithium) for signatures"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/ThreadedSSLSocketInitiator.cpp",
    "line_number": 216,
    "line_content": "    if (SSL_CTX_use_RSAPrivateKey(m_ctx, m_key) <= 0) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "RSA",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "      throw RuntimeError(\"Failed to set certificate\");",
      "    }",
      "",
      "    if (SSL_CTX_use_RSAPrivateKey(m_ctx, m_key) <= 0) {",
      "      ssl_term();",
      "      throw RuntimeError(\"Failed to set key\");",
      "    }"
    ],
    "description": "RSA algorithm usage - not quantum resistant",
    "recommendation": "Replace with ML-DSA (NIST Dilithium) for signatures"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 155,
    "line_content": "static DH *load_dh_param(const char *dhfile) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "MEDIUM",
    "context_lines": [
      "namespace FIX {",
      "",
      "#ifndef OPENSSL_NO_DH",
      "static DH *load_dh_param(const char *dhfile) {",
      "  DH *ret = NULL;",
      "  BIO *bio;",
      ""
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 156,
    "line_content": "  DH *ret = NULL;",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "",
      "#ifndef OPENSSL_NO_DH",
      "static DH *load_dh_param(const char *dhfile) {",
      "  DH *ret = NULL;",
      "  BIO *bio;",
      "",
      "  if ((bio = BIO_new_file(dhfile, \"r\")) == NULL) {"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 173,
    "line_content": "static int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "MEDIUM",
    "context_lines": [
      "#if (OPENSSL_VERSION_NUMBER < 0x10100000L)",
      "/* OpenSSL Pre-1.1.0 compatibility */",
      "/* Taken from OpenSSL 1.1.0 snapshot 20160410 */",
      "static int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g) {",
      "  /* q is optional */",
      "  if (p == NULL || g == NULL) {",
      "    return 0;"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 197,
    "line_content": "static DH *make_dh_params(BIGNUM *(*prime)(BIGNUM *)) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "MEDIUM",
    "context_lines": [
      " * Grab well-defined DH parameters from OpenSSL, see the BN_get_rfc*",
      " * functions in <openssl/bn.h> for all available primes.",
      " */",
      "static DH *make_dh_params(BIGNUM *(*prime)(BIGNUM *)) {",
      "  DH *dh = DH_new();",
      "  BIGNUM *p, *g;",
      ""
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 198,
    "line_content": "  DH *dh = DH_new();",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      " * functions in <openssl/bn.h> for all available primes.",
      " */",
      "static DH *make_dh_params(BIGNUM *(*prime)(BIGNUM *)) {",
      "  DH *dh = DH_new();",
      "  BIGNUM *p, *g;",
      "",
      "  if (!dh) {"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 198,
    "line_content": "  DH *dh = DH_new();",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      " * functions in <openssl/bn.h> for all available primes.",
      " */",
      "static DH *make_dh_params(BIGNUM *(*prime)(BIGNUM *)) {",
      "  DH *dh = DH_new();",
      "  BIGNUM *p, *g;",
      "",
      "  if (!dh) {"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 210,
    "line_content": "    DH_free(dh);",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "MEDIUM",
    "context_lines": [
      "    BN_set_word(g, 2);",
      "  }",
      "  if (!p || !g || !DH_set0_pqg(dh, p, NULL, g)) {",
      "    DH_free(dh);",
      "    BN_free(p);",
      "    BN_free(g);",
      "    return NULL;"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 246,
    "line_content": "    DH_free(dhparams[n].dh);",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "MEDIUM",
    "context_lines": [
      "   * in the (unexpected) case where these variables are already",
      "   * NULL. */",
      "  for (n = 0; n < sizeof(dhparams) / sizeof(dhparams[0]); n++) {",
      "    DH_free(dhparams[n].dh);",
      "    dhparams[n].dh = NULL;",
      "  }",
      "}"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 258,
    "line_content": "DH *modssl_get_dh_params(unsigned keylen) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      " * contrast to the keys itself) and code safe as the returned structure",
      " * is duplicated by OpenSSL anyway. Hence no modification happens",
      " * to our copy. */",
      "DH *modssl_get_dh_params(unsigned keylen) {",
      "  unsigned n;",
      "",
      "  for (n = 0; n < sizeof(dhparams) / sizeof(dhparams[0]); n++) {"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 273,
    "line_content": "DH *ssl_callback_TmpDH(SSL *ssl, int exportvar, int keylen) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "MEDIUM",
    "context_lines": [
      "/*",
      " * Hand out standard DH parameters, based on the authentication strength",
      " */",
      "DH *ssl_callback_TmpDH(SSL *ssl, int exportvar, int keylen) {",
      "  EVP_PKEY *pkey;",
      "  int type;",
      ""
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 273,
    "line_content": "DH *ssl_callback_TmpDH(SSL *ssl, int exportvar, int keylen) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "MEDIUM",
    "context_lines": [
      "/*",
      " * Hand out standard DH parameters, based on the authentication strength",
      " */",
      "DH *ssl_callback_TmpDH(SSL *ssl, int exportvar, int keylen) {",
      "  EVP_PKEY *pkey;",
      "  int type;",
      ""
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 296,
    "line_content": "  if ((type == EVP_PKEY_RSA) || (type == EVP_PKEY_DSA)) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "RSA",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "   * 1024-bit DH parameters (with the effect that OpenSSL skips this",
      "   * callback).",
      "   */",
      "  if ((type == EVP_PKEY_RSA) || (type == EVP_PKEY_DSA)) {",
      "    keylen = EVP_PKEY_bits(pkey);",
      "  }",
      ""
    ],
    "description": "RSA algorithm usage - not quantum resistant",
    "recommendation": "Replace with ML-DSA (NIST Dilithium) for signatures"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 296,
    "line_content": "  if ((type == EVP_PKEY_RSA) || (type == EVP_PKEY_DSA)) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DSA",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "   * 1024-bit DH parameters (with the effect that OpenSSL skips this",
      "   * callback).",
      "   */",
      "  if ((type == EVP_PKEY_RSA) || (type == EVP_PKEY_DSA)) {",
      "    keylen = EVP_PKEY_bits(pkey);",
      "  }",
      ""
    ],
    "description": "DSA algorithm usage - not quantum resistant",
    "recommendation": "Replace with ML-DSA (NIST Dilithium) for signatures"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 944,
    "line_content": "        thisopt = SSL_PROTOCOL_SSLV2;",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "Legacy_TLS",
    "severity": "MEDIUM",
    "confidence": "HIGH",
    "context_lines": [
      "      }",
      "",
      "      if (!strncasecmp(w, \"SSLv2\", 5 /* strlen(\"SSLv2\") */)) {",
      "        thisopt = SSL_PROTOCOL_SSLV2;",
      "        w += 5 /* strlen(\"SSLv2\")*/;",
      "      } else if (!strncasecmp(w, \"SSLv3\", 5 /* strlen(\"SSLv3\") */)) {",
      "        thisopt = SSL_PROTOCOL_SSLV3;"
    ],
    "description": "Legacy SSL/TLS protocol versions",
    "recommendation": "Upgrade to TLS 1.3 with post-quantum cipher suites"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 947,
    "line_content": "        thisopt = SSL_PROTOCOL_SSLV3;",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "Legacy_TLS",
    "severity": "MEDIUM",
    "confidence": "HIGH",
    "context_lines": [
      "        thisopt = SSL_PROTOCOL_SSLV2;",
      "        w += 5 /* strlen(\"SSLv2\")*/;",
      "      } else if (!strncasecmp(w, \"SSLv3\", 5 /* strlen(\"SSLv3\") */)) {",
      "        thisopt = SSL_PROTOCOL_SSLV3;",
      "        w += 5 /*strlen(\"SSLv3\") */;",
      "      } else if (!strncasecmp(w, \"TLSv1_1\", 7 /* strlen(\"TLSv1_1\") */)) {",
      "        thisopt = SSL_PROTOCOL_TLSV1_1;"
    ],
    "description": "Legacy SSL/TLS protocol versions",
    "recommendation": "Upgrade to TLS 1.3 with post-quantum cipher suites"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 982,
    "line_content": "    thisopt = SSL_PROTOCOL_SSLV2;",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "Legacy_TLS",
    "severity": "MEDIUM",
    "confidence": "HIGH",
    "context_lines": [
      "    }",
      "  } else { /* default all except SSLv2 */",
      "    options = SSL_PROTOCOL_ALL;",
      "    thisopt = SSL_PROTOCOL_SSLV2;",
      "    options &= ~thisopt;",
      "  }",
      ""
    ],
    "description": "Legacy SSL/TLS protocol versions",
    "recommendation": "Upgrade to TLS 1.3 with post-quantum cipher suites"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 991,
    "line_content": "  if (!(options & SSL_PROTOCOL_SSLV2)) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "Legacy_TLS",
    "severity": "MEDIUM",
    "confidence": "HIGH",
    "context_lines": [
      "",
      "void setCtxOptions(SSL_CTX *ctx, long options) {",
      "  SSL_CTX_set_options(ctx, SSL_OP_ALL);",
      "  if (!(options & SSL_PROTOCOL_SSLV2)) {",
      "    SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2);",
      "  }",
      "  if (!(options & SSL_PROTOCOL_SSLV3)) {"
    ],
    "description": "Legacy SSL/TLS protocol versions",
    "recommendation": "Upgrade to TLS 1.3 with post-quantum cipher suites"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 994,
    "line_content": "  if (!(options & SSL_PROTOCOL_SSLV3)) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "Legacy_TLS",
    "severity": "MEDIUM",
    "confidence": "HIGH",
    "context_lines": [
      "  if (!(options & SSL_PROTOCOL_SSLV2)) {",
      "    SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2);",
      "  }",
      "  if (!(options & SSL_PROTOCOL_SSLV3)) {",
      "    SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv3);",
      "  }",
      "  if (!(options & SSL_PROTOCOL_TLSV1)) {"
    ],
    "description": "Legacy SSL/TLS protocol versions",
    "recommendation": "Upgrade to TLS 1.3 with post-quantum cipher suites"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 1017,
    "line_content": "    DH *dh = NULL;",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "#ifndef OPENSSL_NO_DH",
      "  int no_dhe = 0;",
      "  if (!no_dhe) {",
      "    DH *dh = NULL;",
      "",
      "    if (certFile) {",
      "      dh = load_dh_param(certFile);"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 1024,
    "line_content": "      SSL_CTX_set_tmp_dh(ctx, dh);",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "    }",
      "",
      "    if (dh != NULL) {",
      "      SSL_CTX_set_tmp_dh(ctx, dh);",
      "",
      "      DH_free(dh);",
      "    } else {"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 1026,
    "line_content": "      DH_free(dh);",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "    if (dh != NULL) {",
      "      SSL_CTX_set_tmp_dh(ctx, dh);",
      "",
      "      DH_free(dh);",
      "    } else {",
      "      SSL_CTX_set_tmp_dh_callback(ctx, ssl_callback_TmpDH);",
      "    }"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 1028,
    "line_content": "      SSL_CTX_set_tmp_dh_callback(ctx, ssl_callback_TmpDH);",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "DH",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "",
      "      DH_free(dh);",
      "    } else {",
      "      SSL_CTX_set_tmp_dh_callback(ctx, ssl_callback_TmpDH);",
      "    }",
      "    //(void)BIO_flush(bio_s_out);",
      "  }"
    ],
    "description": "Diffie-Hellman key exchange - not quantum resistant",
    "recommendation": "Replace with ML-KEM (NIST Kyber) for key exchange"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 1036,
    "line_content": "  ecdh = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "ECDSA_EC",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "",
      "#ifndef OPENSSL_NO_ECDH",
      "  EC_KEY *ecdh;",
      "  ecdh = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);",
      "  if (ecdh == NULL) {",
      "    return 2;",
      "  }"
    ],
    "description": "ECDSA/EC algorithm usage - not quantum resistant",
    "recommendation": "Replace ECDSA with ML-DSA, ECDH with ML-KEM (Kyber)"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 1036,
    "line_content": "  ecdh = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "ECDSA_EC",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "",
      "#ifndef OPENSSL_NO_ECDH",
      "  EC_KEY *ecdh;",
      "  ecdh = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);",
      "  if (ecdh == NULL) {",
      "    return 2;",
      "  }"
    ],
    "description": "ECDSA/EC algorithm usage - not quantum resistant",
    "recommendation": "Replace ECDSA with ML-DSA, ECDH with ML-KEM (Kyber)"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 1040,
    "line_content": "  SSL_CTX_set_tmp_ecdh(ctx, ecdh);",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "ECDSA_EC",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "  if (ecdh == NULL) {",
      "    return 2;",
      "  }",
      "  SSL_CTX_set_tmp_ecdh(ctx, ecdh);",
      "  EC_KEY_free(ecdh);",
      "#endif",
      ""
    ],
    "description": "ECDSA/EC algorithm usage - not quantum resistant",
    "recommendation": "Replace ECDSA with ML-DSA, ECDH with ML-KEM (Kyber)"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/UtilitySSL.cpp",
    "line_number": 1041,
    "line_content": "  EC_KEY_free(ecdh);",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "ECDSA_EC",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "    return 2;",
      "  }",
      "  SSL_CTX_set_tmp_ecdh(ctx, ecdh);",
      "  EC_KEY_free(ecdh);",
      "#endif",
      "",
      "  return 0;"
    ],
    "description": "ECDSA/EC algorithm usage - not quantum resistant",
    "recommendation": "Replace ECDSA with ML-DSA, ECDH with ML-KEM (Kyber)"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/SSLSocketInitiator.h",
    "line_number": 151,
    "line_content": "  void setCertAndKey(X509 *cert, RSA *key) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "RSA",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "",
      "  void setPassword(const std::string &pwd) { m_password.assign(pwd); }",
      "",
      "  void setCertAndKey(X509 *cert, RSA *key) {",
      "    m_cert = cert;",
      "    m_key = key;",
      "  }"
    ],
    "description": "RSA algorithm usage - not quantum resistant",
    "recommendation": "Replace with ML-DSA (NIST Dilithium) for signatures"
  },
  {
    "file_path": "/home/jl1335/quickfixc/src/C++/SSLSocketInitiator.cpp",
    "line_number": 224,
    "line_content": "    if (SSL_CTX_use_RSAPrivateKey(m_ctx, m_key) <= 0) {",
    "crypto_type": "Legacy Cryptography",
    "algorithm": "RSA",
    "severity": "HIGH",
    "confidence": "HIGH",
    "context_lines": [
      "      throw RuntimeError(\"Failed to set certificate\");",
      "    }",
      "",
      "    if (SSL_CTX_use_RSAPrivateKey(m_ctx, m_key) <= 0) {",
      "      ssl_term();",
      "      throw RuntimeError(\"Failed to set key\");",
      "    }"
    ],
    "description": "RSA algorithm usage - not quantum resistant",
    "recommendation": "Replace with ML-DSA (NIST Dilithium) for signatures"
  }
]